import React, { useEffect, Children } from 'react'
import { motion, useAnimation } from 'framer-motion'
import { useInView } from 'react-intersection-observer'
const CTASection = () => {
  const controls = useAnimation()
  const [ref, inView] = useInView({
    threshold: 0.3,
    triggerOnce: true,
  })
  useEffect(() => {
    if (inView) {
      controls.start('visible')
    }
  }, [controls, inView])
  const containerVariants = {
    hidden: {
      opacity: 0,
    },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.3,
      },
    },
  }
  const itemVariants = {
    hidden: {
      y: 20,
      opacity: 0,
    },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.8,
        ease: 'easeOut',
      },
    },
  }
  return (
    <motion.section
      ref={ref}
      className="relative py-20 overflow-hidden"
      initial="hidden"
      animate={controls}
      variants={containerVariants}
    >
      <div className="absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-white/20 to-transparent" />
      <div className="container mx-auto px-6">
        <motion.div
          variants={itemVariants}
          className="relative bg-gradient-to-r from-blue-900/20 to-purple-900/20 rounded-3xl p-12 overflow-hidden border border-white/10 backdrop-blur-sm"
        >
          <div className="absolute inset-0 overflow-hidden">
            {Array(5)
              .fill(0)
              .map((_, i) => (
                <motion.div
                  key={i}
                  className="absolute rounded-full bg-gradient-to-r from-blue-600/10 to-purple-600/10"
                  style={{
                    width: Math.random() * 300 + 100,
                    height: Math.random() * 300 + 100,
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                  }}
                  animate={{
                    x: [0, Math.random() * 50 - 25],
                    y: [0, Math.random() * 50 - 25],
                  }}
                  transition={{
                    duration: Math.random() * 10 + 10,
                    repeat: Infinity,
                    repeatType: 'reverse',
                  }}
                />
              ))}
          </div>
          <div className="relative z-10 flex flex-col md:flex-row items-center justify-between">
            <div className="mb-8 md:mb-0 text-center md:text-left">
              <h2 className="text-3xl md:text-4xl font-bold mb-4 text-white">
                Ready to Join the Revolution?
              </h2>
              <p className="text-gray-300 max-w-lg">
                Get early access to our platform and be among the first to
                experience the future of decentralized finance.
              </p>
            </div>
            <div className="flex flex-col sm:flex-row gap-4">
              <motion.button
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white px-8 py-3 rounded-full font-medium relative overflow-hidden group"
                whileHover={{
                  scale: 1.05,
                }}
                whileTap={{
                  scale: 0.95,
                }}
              >
                <span className="relative z-10">Join Waitlist</span>
                <div className="absolute inset-0 opacity-0 group-hover:opacity-30 transition-opacity duration-300 bg-white" />
              </motion.button>
              <motion.button
                className="bg-white/5 hover:bg-white/10 text-white border border-white/10 px-8 py-3 rounded-full font-medium"
                whileHover={{
                  scale: 1.05,
                }}
                whileTap={{
                  scale: 0.95,
                }}
              >
                View Whitepaper
              </motion.button>
            </div>
          </div>
        </motion.div>
      </div>
    </motion.section>
  )
}
export default CTASection
