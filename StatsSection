import React, { useEffect, Children } from 'react'
import { motion, useAnimation } from 'framer-motion'
import { useInView } from 'react-intersection-observer'
import CountUp from 'react-countup'
const StatsSection = () => {
  const controls = useAnimation()
  const [ref, inView] = useInView({
    threshold: 0.3,
    triggerOnce: true,
  })
  useEffect(() => {
    if (inView) {
      controls.start('visible')
    }
  }, [controls, inView])
  const containerVariants = {
    hidden: {
      opacity: 0,
    },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.3,
      },
    },
  }
  const itemVariants = {
    hidden: {
      y: 20,
      opacity: 0,
    },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.8,
        ease: 'easeOut',
      },
    },
  }
  const stats = [
    {
      value: 3.2,
      suffix: 'M',
      label: 'Users Worldwide',
    },
    {
      value: 42,
      suffix: 'B',
      label: 'Total Value Locked',
    },
    {
      value: 12,
      suffix: 'K',
      label: 'Transactions Per Second',
    },
    {
      value: 99.9,
      suffix: '%',
      label: 'Uptime Guarantee',
    },
  ]
  return (
    <motion.section
      ref={ref}
      className="relative py-20 bg-black/50 backdrop-blur-sm"
      initial="hidden"
      animate={controls}
      variants={containerVariants}
    >
      <div className="absolute inset-0 bg-grid-pattern opacity-10" />
      <div className="container mx-auto px-6 relative z-10">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={index}
              variants={itemVariants}
              className="text-center"
            >
              <div className="inline-flex items-center justify-center">
                <div className="relative">
                  <div className="absolute -inset-4 rounded-full bg-gradient-to-r from-blue-600/20 to-purple-600/20 blur-lg" />
                  <h3 className="text-4xl md:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-500 relative">
                    {inView ? (
                      <CountUp
                        end={stat.value}
                        duration={2.5}
                        decimals={stat.value % 1 !== 0 ? 1 : 0}
                        suffix={stat.suffix}
                      />
                    ) : (
                      `0${stat.suffix}`
                    )}
                  </h3>
                </div>
              </div>
              <p className="text-gray-400 mt-2">{stat.label}</p>
            </motion.div>
          ))}
        </div>
        <motion.div
          variants={itemVariants}
          className="mt-16 bg-gradient-to-r from-blue-900/20 to-purple-900/20 border border-white/10 rounded-2xl p-8 backdrop-blur-sm"
        >
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="mb-6 md:mb-0">
              <h4 className="text-2xl font-bold text-white mb-2">
                Token Presale Ending In
              </h4>
              <p className="text-gray-400">
                Get your $FRANIX tokens before the public sale
              </p>
            </div>
            <div className="flex space-x-4">
              {['Days', 'Hours', 'Minutes', 'Seconds'].map((unit, index) => (
                <div key={index} className="text-center">
                  <div className="w-16 h-16 bg-black/60 border border-white/10 rounded-lg flex items-center justify-center text-2xl font-bold text-white">
                    {['07', '14', '32', '56'][index]}
                  </div>
                  <div className="text-xs text-gray-400 mt-2">{unit}</div>
                </div>
              ))}
            </div>
          </div>
        </motion.div>
      </div>
    </motion.section>
  )
}
export default StatsSection
